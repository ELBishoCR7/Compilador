/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package compiladorfinal;

import static compiladorfinal.Tokens.ERROR;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

/**
 *
 * @author gmva2
 */
public class IDE extends javax.swing.JFrame {

    /**
     * Creates new form IDE
     */
    
    public IDE() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtCodigo = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtTokens = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtCodigoIntermedio = new javax.swing.JTextPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtError = new javax.swing.JTextPane();
        btnCompilar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(txtCodigo);

        jScrollPane2.setViewportView(txtTokens);

        jScrollPane3.setViewportView(txtCodigoIntermedio);

        jScrollPane4.setViewportView(txtError);

        btnCompilar.setText("Compilar");
        btnCompilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompilarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 656, Short.MAX_VALUE)
                    .addComponent(jScrollPane4))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane3))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(btnCompilar)
                        .addContainerGap(249, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(btnCompilar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 44, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCompilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompilarActionPerformed
        // TODO add your handling code here:
        int numeroTokens =0;
        int filaLexico = 0;
        boolean errToken = false;
        String mensajeErrorToken = "";
        
        List<String> valores = new ArrayList<>();
        List<Integer> cantidadtokens = new ArrayList<>();
        File archivo = new File("archivo.txt");
        PrintWriter escribir;

        try {
            escribir = new PrintWriter(archivo);
            escribir.print(txtCodigo.getText());
            escribir.close();
        } catch (FileNotFoundException e) {
            System.err.println("Error al escribir en el archivo");
        }

        try {
            Reader lector = new BufferedReader(new FileReader("archivo.txt"));
            Lexer lexer = new Lexer(lector);
            String resultado = "";

            while (true) {
                Tokens tokens = lexer.yylex();
                
                //System.out.println("tokens: "+tokens.toString());
                System.out.println("resultado: "+resultado);
                if(tokens == null)
                {
                    
                    txtTokens.setText(resultado);
                    System.out.println("cantidad tokens: "+cantidadtokens.toString());
                    if(!errToken)
                    {
                       resultado+="$";
                       CompiladorFInal sintactico = new CompiladorFInal();
                       String pilasintactica = sintactico.evaluar(resultado.split("\n"), cantidadtokens, valores);
                       if(sintactico.getError().length()==0)
                       {
                           txtCodigoIntermedio.setText(pilasintactica);
                           
                            JTextArea textArea = new JTextArea(sintactico.getCodigoIntermedio());

                            // Hacer el JTextArea no editable (opcional)
                            textArea.setEditable(false);

                            // Encapsular el JTextArea en un JScrollPane
                            JScrollPane scrollPane = new JScrollPane(textArea);

                            // Ajustar el tamaño del JScrollPane
                            scrollPane.setPreferredSize(new java.awt.Dimension(400, 600));

                            // Mostrar el JScrollPane en el JOptionPane
                            JOptionPane.showMessageDialog(
                                null,
                                scrollPane,
                                "Código Intermedio",
                                JOptionPane.INFORMATION_MESSAGE
                            );
                       }else
                       {
                           JOptionPane.showMessageDialog(null, sintactico.getError(), "Error", JOptionPane.ERROR_MESSAGE);

                       }
                       
                    }
                    return;
                }
                switch (tokens) {
                    case ERROR:
                    resultado += "SIMBOLO NO DEFINIDO\n";
                    errToken = true;
                    mensajeErrorToken += "ERROR LEXICO, simbolo no valido '"+lexer.yytext()+"' en la fila: "+filaLexico;
                    break;
                    case id, num, caracter, cadena:
                    
                    resultado += tokens+"\n";
                    numeroTokens+=1;
                    System.out.println("AGREGO A VALORES: "+lexer.yytext());
                    valores.add(lexer.yytext());
                    break;
                    case SaltoLinea:
                    cantidadtokens.add(numeroTokens);
                    filaLexico++;
                    break;
                    default:
                    System.out.println("AGREGO A VALORES: "+lexer.yytext());
                    resultado += lexer.yytext()+"\n";
                    valores.add(lexer.yytext());
                    numeroTokens+=1;
                        break;
                }

            }
        } catch (FileNotFoundException ex) {
            System.err.println("Error al leer en el archivo");
        } catch (IOException ex) {
            System.err.println("Error");
        }
                                           

    }//GEN-LAST:event_btnCompilarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IDE().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCompilar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextPane txtCodigo;
    private javax.swing.JTextPane txtCodigoIntermedio;
    private javax.swing.JTextPane txtError;
    private javax.swing.JTextPane txtTokens;
    // End of variables declaration//GEN-END:variables
}
